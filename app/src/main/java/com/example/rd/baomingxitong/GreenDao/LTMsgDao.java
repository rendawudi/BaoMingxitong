package com.example.rd.baomingxitong.GreenDao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.rd.baomingxitong.entity.LiaoTian.LTMsg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LTMSG".
*/
public class LTMsgDao extends AbstractDao<LTMsg, Long> {

    public static final String TABLENAME = "LTMSG";

    /**
     * Properties of entity LTMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Xmid = new Property(1, Long.class, "xmid", false, "XMID");
        public final static Property Sender = new Property(2, String.class, "sender", false, "SENDER");
        public final static Property XiangmuId = new Property(3, Long.class, "xiangmuId", false, "XIANGMU_ID");
        public final static Property Msg = new Property(4, String.class, "msg", false, "MSG");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
        public final static Property Xingming = new Property(6, String.class, "xingming", false, "XINGMING");
        public final static Property Duizhangxuehao = new Property(7, String.class, "duizhangxuehao", false, "DUIZHANGXUEHAO");
        public final static Property PiciId = new Property(8, Long.class, "piciId", false, "PICI_ID");
    }

    private Query<LTMsg> lTXiangmu_MsgListQuery;

    public LTMsgDao(DaoConfig config) {
        super(config);
    }
    
    public LTMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LTMSG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"XMID\" INTEGER," + // 1: xmid
                "\"SENDER\" TEXT," + // 2: sender
                "\"XIANGMU_ID\" INTEGER," + // 3: xiangmuId
                "\"MSG\" TEXT," + // 4: msg
                "\"TIME\" TEXT," + // 5: time
                "\"XINGMING\" TEXT," + // 6: xingming
                "\"DUIZHANGXUEHAO\" TEXT," + // 7: duizhangxuehao
                "\"PICI_ID\" INTEGER);"); // 8: piciId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LTMSG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LTMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long xmid = entity.getXmid();
        if (xmid != null) {
            stmt.bindLong(2, xmid);
        }
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(3, sender);
        }
 
        Long xiangmuId = entity.getXiangmuId();
        if (xiangmuId != null) {
            stmt.bindLong(4, xiangmuId);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(5, msg);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        String xingming = entity.getXingming();
        if (xingming != null) {
            stmt.bindString(7, xingming);
        }
 
        String duizhangxuehao = entity.getDuizhangxuehao();
        if (duizhangxuehao != null) {
            stmt.bindString(8, duizhangxuehao);
        }
 
        Long piciId = entity.getPiciId();
        if (piciId != null) {
            stmt.bindLong(9, piciId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LTMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long xmid = entity.getXmid();
        if (xmid != null) {
            stmt.bindLong(2, xmid);
        }
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(3, sender);
        }
 
        Long xiangmuId = entity.getXiangmuId();
        if (xiangmuId != null) {
            stmt.bindLong(4, xiangmuId);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(5, msg);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        String xingming = entity.getXingming();
        if (xingming != null) {
            stmt.bindString(7, xingming);
        }
 
        String duizhangxuehao = entity.getDuizhangxuehao();
        if (duizhangxuehao != null) {
            stmt.bindString(8, duizhangxuehao);
        }
 
        Long piciId = entity.getPiciId();
        if (piciId != null) {
            stmt.bindLong(9, piciId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LTMsg readEntity(Cursor cursor, int offset) {
        LTMsg entity = new LTMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // xmid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sender
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // xiangmuId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // msg
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // xingming
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // duizhangxuehao
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // piciId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LTMsg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setXmid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSender(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setXiangmuId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setMsg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setXingming(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDuizhangxuehao(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPiciId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LTMsg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LTMsg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LTMsg entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "MsgList" to-many relationship of LTXiangmu. */
    public List<LTMsg> _queryLTXiangmu_MsgList(Long xmid) {
        synchronized (this) {
            if (lTXiangmu_MsgListQuery == null) {
                QueryBuilder<LTMsg> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Xmid.eq(null));
                lTXiangmu_MsgListQuery = queryBuilder.build();
            }
        }
        Query<LTMsg> query = lTXiangmu_MsgListQuery.forCurrentThread();
        query.setParameter(0, xmid);
        return query.list();
    }

}
