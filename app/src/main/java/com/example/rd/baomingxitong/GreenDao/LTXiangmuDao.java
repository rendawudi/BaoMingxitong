package com.example.rd.baomingxitong.GreenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.rd.baomingxitong.entity.LiaoTian.LTXiangmu;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LTXIANGMU".
*/
public class LTXiangmuDao extends AbstractDao<LTXiangmu, Long> {

    public static final String TABLENAME = "LTXIANGMU";

    /**
     * Properties of entity LTXiangmu.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Xmid = new Property(0, Long.class, "xmid", true, "_id");
        public final static Property XiangmuId = new Property(1, Long.class, "xiangmuId", false, "XIANGMU_ID");
        public final static Property PiciId = new Property(2, Long.class, "piciId", false, "PICI_ID");
        public final static Property Duizhangxuehao = new Property(3, String.class, "duizhangxuehao", false, "DUIZHANGXUEHAO");
        public final static Property Xiangmu = new Property(4, String.class, "xiangmu", false, "XIANGMU");
        public final static Property Duizhangmingzi = new Property(5, String.class, "duizhangmingzi", false, "DUIZHANGMINGZI");
        public final static Property Banjimingzi = new Property(6, String.class, "banjimingzi", false, "BANJIMINGZI");
        public final static Property Zhuangtai = new Property(7, int.class, "zhuangtai", false, "ZHUANGTAI");
    }

    private DaoSession daoSession;


    public LTXiangmuDao(DaoConfig config) {
        super(config);
    }
    
    public LTXiangmuDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LTXIANGMU\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: xmid
                "\"XIANGMU_ID\" INTEGER," + // 1: xiangmuId
                "\"PICI_ID\" INTEGER," + // 2: piciId
                "\"DUIZHANGXUEHAO\" TEXT," + // 3: duizhangxuehao
                "\"XIANGMU\" TEXT," + // 4: xiangmu
                "\"DUIZHANGMINGZI\" TEXT," + // 5: duizhangmingzi
                "\"BANJIMINGZI\" TEXT," + // 6: banjimingzi
                "\"ZHUANGTAI\" INTEGER NOT NULL );"); // 7: zhuangtai
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_LTXIANGMU_XIANGMU_ID ON \"LTXIANGMU\"" +
                " (\"XIANGMU_ID\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_LTXIANGMU_PICI_ID ON \"LTXIANGMU\"" +
                " (\"PICI_ID\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_LTXIANGMU_DUIZHANGXUEHAO ON \"LTXIANGMU\"" +
                " (\"DUIZHANGXUEHAO\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LTXIANGMU\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LTXiangmu entity) {
        stmt.clearBindings();
 
        Long xmid = entity.getXmid();
        if (xmid != null) {
            stmt.bindLong(1, xmid);
        }
 
        Long xiangmuId = entity.getXiangmuId();
        if (xiangmuId != null) {
            stmt.bindLong(2, xiangmuId);
        }
 
        Long piciId = entity.getPiciId();
        if (piciId != null) {
            stmt.bindLong(3, piciId);
        }
 
        String duizhangxuehao = entity.getDuizhangxuehao();
        if (duizhangxuehao != null) {
            stmt.bindString(4, duizhangxuehao);
        }
 
        String xiangmu = entity.getXiangmu();
        if (xiangmu != null) {
            stmt.bindString(5, xiangmu);
        }
 
        String duizhangmingzi = entity.getDuizhangmingzi();
        if (duizhangmingzi != null) {
            stmt.bindString(6, duizhangmingzi);
        }
 
        String banjimingzi = entity.getBanjimingzi();
        if (banjimingzi != null) {
            stmt.bindString(7, banjimingzi);
        }
        stmt.bindLong(8, entity.getZhuangtai());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LTXiangmu entity) {
        stmt.clearBindings();
 
        Long xmid = entity.getXmid();
        if (xmid != null) {
            stmt.bindLong(1, xmid);
        }
 
        Long xiangmuId = entity.getXiangmuId();
        if (xiangmuId != null) {
            stmt.bindLong(2, xiangmuId);
        }
 
        Long piciId = entity.getPiciId();
        if (piciId != null) {
            stmt.bindLong(3, piciId);
        }
 
        String duizhangxuehao = entity.getDuizhangxuehao();
        if (duizhangxuehao != null) {
            stmt.bindString(4, duizhangxuehao);
        }
 
        String xiangmu = entity.getXiangmu();
        if (xiangmu != null) {
            stmt.bindString(5, xiangmu);
        }
 
        String duizhangmingzi = entity.getDuizhangmingzi();
        if (duizhangmingzi != null) {
            stmt.bindString(6, duizhangmingzi);
        }
 
        String banjimingzi = entity.getBanjimingzi();
        if (banjimingzi != null) {
            stmt.bindString(7, banjimingzi);
        }
        stmt.bindLong(8, entity.getZhuangtai());
    }

    @Override
    protected final void attachEntity(LTXiangmu entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LTXiangmu readEntity(Cursor cursor, int offset) {
        LTXiangmu entity = new LTXiangmu( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // xmid
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // xiangmuId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // piciId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // duizhangxuehao
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // xiangmu
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // duizhangmingzi
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // banjimingzi
            cursor.getInt(offset + 7) // zhuangtai
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LTXiangmu entity, int offset) {
        entity.setXmid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setXiangmuId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPiciId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDuizhangxuehao(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setXiangmu(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDuizhangmingzi(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBanjimingzi(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setZhuangtai(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LTXiangmu entity, long rowId) {
        entity.setXmid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LTXiangmu entity) {
        if(entity != null) {
            return entity.getXmid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LTXiangmu entity) {
        return entity.getXmid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
